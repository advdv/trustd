// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: internal/rpc/v1/rpc.proto

package rpcv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/advdv/trustd/internal/rpc/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GraphServiceName is the fully-qualified name of the GraphService service.
	GraphServiceName = "internal.rpc.v1.GraphService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GraphServiceRandomGraphProcedure is the fully-qualified name of the GraphService's RandomGraph
	// RPC.
	GraphServiceRandomGraphProcedure = "/internal.rpc.v1.GraphService/RandomGraph"
)

// GraphServiceClient is a client for the internal.rpc.v1.GraphService service.
type GraphServiceClient interface {
	RandomGraph(context.Context, *connect.Request[v1.RandomGraphRequest]) (*connect.Response[v1.RandomGraphResponse], error)
}

// NewGraphServiceClient constructs a client for the internal.rpc.v1.GraphService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGraphServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GraphServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	graphServiceMethods := v1.File_internal_rpc_v1_rpc_proto.Services().ByName("GraphService").Methods()
	return &graphServiceClient{
		randomGraph: connect.NewClient[v1.RandomGraphRequest, v1.RandomGraphResponse](
			httpClient,
			baseURL+GraphServiceRandomGraphProcedure,
			connect.WithSchema(graphServiceMethods.ByName("RandomGraph")),
			connect.WithClientOptions(opts...),
		),
	}
}

// graphServiceClient implements GraphServiceClient.
type graphServiceClient struct {
	randomGraph *connect.Client[v1.RandomGraphRequest, v1.RandomGraphResponse]
}

// RandomGraph calls internal.rpc.v1.GraphService.RandomGraph.
func (c *graphServiceClient) RandomGraph(ctx context.Context, req *connect.Request[v1.RandomGraphRequest]) (*connect.Response[v1.RandomGraphResponse], error) {
	return c.randomGraph.CallUnary(ctx, req)
}

// GraphServiceHandler is an implementation of the internal.rpc.v1.GraphService service.
type GraphServiceHandler interface {
	RandomGraph(context.Context, *connect.Request[v1.RandomGraphRequest]) (*connect.Response[v1.RandomGraphResponse], error)
}

// NewGraphServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGraphServiceHandler(svc GraphServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	graphServiceMethods := v1.File_internal_rpc_v1_rpc_proto.Services().ByName("GraphService").Methods()
	graphServiceRandomGraphHandler := connect.NewUnaryHandler(
		GraphServiceRandomGraphProcedure,
		svc.RandomGraph,
		connect.WithSchema(graphServiceMethods.ByName("RandomGraph")),
		connect.WithHandlerOptions(opts...),
	)
	return "/internal.rpc.v1.GraphService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GraphServiceRandomGraphProcedure:
			graphServiceRandomGraphHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGraphServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGraphServiceHandler struct{}

func (UnimplementedGraphServiceHandler) RandomGraph(context.Context, *connect.Request[v1.RandomGraphRequest]) (*connect.Response[v1.RandomGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internal.rpc.v1.GraphService.RandomGraph is not implemented"))
}
